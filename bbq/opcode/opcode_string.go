// Code generated by "stringer -type=Opcode"; DO NOT EDIT.

package opcode

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Unknown-0]
	_ = x[Return-1]
	_ = x[ReturnValue-2]
	_ = x[Jump-3]
	_ = x[JumpIfFalse-4]
	_ = x[JumpIfTrue-5]
	_ = x[JumpIfNil-6]
	_ = x[Add-11]
	_ = x[Subtract-12]
	_ = x[Multiply-13]
	_ = x[Divide-14]
	_ = x[Mod-15]
	_ = x[Negate-16]
	_ = x[BitwiseOr-20]
	_ = x[BitwiseAnd-21]
	_ = x[BitwiseXor-22]
	_ = x[BitwiseLeftShift-23]
	_ = x[BitwiseRightShift-24]
	_ = x[Less-26]
	_ = x[Greater-27]
	_ = x[LessOrEqual-28]
	_ = x[GreaterOrEqual-29]
	_ = x[Equal-30]
	_ = x[NotEqual-31]
	_ = x[Not-32]
	_ = x[Unwrap-36]
	_ = x[Destroy-37]
	_ = x[TransferAndConvert-38]
	_ = x[SimpleCast-39]
	_ = x[FailableCast-40]
	_ = x[ForceCast-41]
	_ = x[Deref-42]
	_ = x[Transfer-43]
	_ = x[True-49]
	_ = x[False-50]
	_ = x[Nil-51]
	_ = x[New-52]
	_ = x[NewPath-53]
	_ = x[NewArray-54]
	_ = x[NewDictionary-55]
	_ = x[NewRef-56]
	_ = x[NewClosure-57]
	_ = x[GetConstant-69]
	_ = x[GetLocal-70]
	_ = x[SetLocal-71]
	_ = x[GetUpvalue-72]
	_ = x[SetUpvalue-73]
	_ = x[GetGlobal-74]
	_ = x[SetGlobal-75]
	_ = x[GetField-76]
	_ = x[RemoveField-77]
	_ = x[SetField-78]
	_ = x[SetIndex-79]
	_ = x[GetIndex-80]
	_ = x[RemoveIndex-81]
	_ = x[Invoke-89]
	_ = x[InvokeMethodStatic-90]
	_ = x[InvokeMethodDynamic-91]
	_ = x[Drop-99]
	_ = x[Dup-100]
	_ = x[Iterator-107]
	_ = x[IteratorHasNext-108]
	_ = x[IteratorNext-109]
	_ = x[EmitEvent-110]
	_ = x[Loop-111]
	_ = x[Statement-112]
	_ = x[OpcodeMax-113]
}

const (
	_Opcode_name_0 = "UnknownReturnReturnValueJumpJumpIfFalseJumpIfTrueJumpIfNil"
	_Opcode_name_1 = "AddSubtractMultiplyDivideModNegate"
	_Opcode_name_2 = "BitwiseOrBitwiseAndBitwiseXorBitwiseLeftShiftBitwiseRightShift"
	_Opcode_name_3 = "LessGreaterLessOrEqualGreaterOrEqualEqualNotEqualNot"
	_Opcode_name_4 = "UnwrapDestroyTransferAndConvertSimpleCastFailableCastForceCastDerefTransfer"
	_Opcode_name_5 = "TrueFalseNilNewNewPathNewArrayNewDictionaryNewRefNewClosure"
	_Opcode_name_6 = "GetConstantGetLocalSetLocalGetUpvalueSetUpvalueGetGlobalSetGlobalGetFieldRemoveFieldSetFieldSetIndexGetIndexRemoveIndex"
	_Opcode_name_7 = "InvokeInvokeMethodStaticInvokeMethodDynamic"
	_Opcode_name_8 = "DropDup"
	_Opcode_name_9 = "IteratorIteratorHasNextIteratorNextEmitEventLoopStatementOpcodeMax"
)

var (
	_Opcode_index_0 = [...]uint8{0, 7, 13, 24, 28, 39, 49, 58}
	_Opcode_index_1 = [...]uint8{0, 3, 11, 19, 25, 28, 34}
	_Opcode_index_2 = [...]uint8{0, 9, 19, 29, 45, 62}
	_Opcode_index_3 = [...]uint8{0, 4, 11, 22, 36, 41, 49, 52}
	_Opcode_index_4 = [...]uint8{0, 6, 13, 31, 41, 53, 62, 67, 75}
	_Opcode_index_5 = [...]uint8{0, 4, 9, 12, 15, 22, 30, 43, 49, 59}
	_Opcode_index_6 = [...]uint8{0, 11, 19, 27, 37, 47, 56, 65, 73, 84, 92, 100, 108, 119}
	_Opcode_index_7 = [...]uint8{0, 6, 24, 43}
	_Opcode_index_8 = [...]uint8{0, 4, 7}
	_Opcode_index_9 = [...]uint8{0, 8, 23, 35, 44, 48, 57, 66}
)

func (i Opcode) String() string {
	switch {
	case i <= 6:
		return _Opcode_name_0[_Opcode_index_0[i]:_Opcode_index_0[i+1]]
	case 11 <= i && i <= 16:
		i -= 11
		return _Opcode_name_1[_Opcode_index_1[i]:_Opcode_index_1[i+1]]
	case 20 <= i && i <= 24:
		i -= 20
		return _Opcode_name_2[_Opcode_index_2[i]:_Opcode_index_2[i+1]]
	case 26 <= i && i <= 32:
		i -= 26
		return _Opcode_name_3[_Opcode_index_3[i]:_Opcode_index_3[i+1]]
	case 36 <= i && i <= 43:
		i -= 36
		return _Opcode_name_4[_Opcode_index_4[i]:_Opcode_index_4[i+1]]
	case 49 <= i && i <= 57:
		i -= 49
		return _Opcode_name_5[_Opcode_index_5[i]:_Opcode_index_5[i+1]]
	case 69 <= i && i <= 81:
		i -= 69
		return _Opcode_name_6[_Opcode_index_6[i]:_Opcode_index_6[i+1]]
	case 89 <= i && i <= 91:
		i -= 89
		return _Opcode_name_7[_Opcode_index_7[i]:_Opcode_index_7[i+1]]
	case 99 <= i && i <= 100:
		i -= 99
		return _Opcode_name_8[_Opcode_index_8[i]:_Opcode_index_8[i+1]]
	case 107 <= i && i <= 113:
		i -= 107
		return _Opcode_name_9[_Opcode_index_9[i]:_Opcode_index_9[i+1]]
	default:
		return "Opcode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
