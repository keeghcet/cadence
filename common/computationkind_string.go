// Code generated by "stringer -type=ComputationKind -trimprefix=ComputationKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ComputationKindUnknown-0]
	_ = x[ComputationKindStatement-1001]
	_ = x[ComputationKindLoop-1002]
	_ = x[ComputationKindFunctionInvocation-1003]
	_ = x[ComputationKindCreateCompositeValue-1010]
	_ = x[ComputationKindTransferCompositeValue-1011]
	_ = x[ComputationKindDestroyCompositeValue-1012]
	_ = x[ComputationKindCreateArrayValue-1025]
	_ = x[ComputationKindTransferArrayValue-1026]
	_ = x[ComputationKindDestroyArrayValue-1027]
	_ = x[ComputationKindCreateDictionaryValue-1040]
	_ = x[ComputationKindTransferDictionaryValue-1041]
	_ = x[ComputationKindDestroyDictionaryValue-1042]
	_ = x[ComputationKindEncodeValue-1080]
	_ = x[ComputationKindSTDLIBPanic-1100]
	_ = x[ComputationKindSTDLIBAssert-1101]
	_ = x[ComputationKindSTDLIBRevertibleRandom-1102]
	_ = x[ComputationKindSTDLIBRLPDecodeString-1108]
	_ = x[ComputationKindSTDLIBRLPDecodeList-1109]
	_ = x[ComputationKindInstructionReturn-1110]
	_ = x[ComputationKindInstructionReturnValue-1111]
	_ = x[ComputationKindInstructionJump-1112]
	_ = x[ComputationKindInstructionJumpIfFalse-1113]
	_ = x[ComputationKindInstructionJumpIfTrue-1114]
	_ = x[ComputationKindInstructionJumpIfNil-1115]
	_ = x[ComputationKindInstructionAdd-1120]
	_ = x[ComputationKindInstructionSubtract-1121]
	_ = x[ComputationKindInstructionMultiply-1122]
	_ = x[ComputationKindInstructionDivide-1123]
	_ = x[ComputationKindInstructionMod-1124]
	_ = x[ComputationKindInstructionNegate-1125]
	_ = x[ComputationKindInstructionBitwiseOr-1129]
	_ = x[ComputationKindInstructionBitwiseAnd-1130]
	_ = x[ComputationKindInstructionBitwiseXor-1131]
	_ = x[ComputationKindInstructionBitwiseLeftShift-1132]
	_ = x[ComputationKindInstructionBitwiseRightShift-1133]
	_ = x[ComputationKindInstructionLess-1135]
	_ = x[ComputationKindInstructionGreater-1136]
	_ = x[ComputationKindInstructionLessOrEqual-1137]
	_ = x[ComputationKindInstructionGreaterOrEqual-1138]
	_ = x[ComputationKindInstructionEqual-1139]
	_ = x[ComputationKindInstructionNotEqual-1140]
	_ = x[ComputationKindInstructionNot-1141]
	_ = x[ComputationKindInstructionUnwrap-1145]
	_ = x[ComputationKindInstructionDestroy-1146]
	_ = x[ComputationKindInstructionTransferAndConvert-1147]
	_ = x[ComputationKindInstructionSimpleCast-1148]
	_ = x[ComputationKindInstructionFailableCast-1149]
	_ = x[ComputationKindInstructionForceCast-1150]
	_ = x[ComputationKindInstructionDeref-1151]
	_ = x[ComputationKindInstructionTransfer-1152]
	_ = x[ComputationKindInstructionTrue-1158]
	_ = x[ComputationKindInstructionFalse-1159]
	_ = x[ComputationKindInstructionNil-1160]
	_ = x[ComputationKindInstructionNew-1161]
	_ = x[ComputationKindInstructionNewPath-1162]
	_ = x[ComputationKindInstructionNewArray-1163]
	_ = x[ComputationKindInstructionNewDictionary-1164]
	_ = x[ComputationKindInstructionNewRef-1165]
	_ = x[ComputationKindInstructionNewClosure-1166]
	_ = x[ComputationKindInstructionGetConstant-1178]
	_ = x[ComputationKindInstructionGetLocal-1179]
	_ = x[ComputationKindInstructionSetLocal-1180]
	_ = x[ComputationKindInstructionGetUpvalue-1181]
	_ = x[ComputationKindInstructionSetUpvalue-1182]
	_ = x[ComputationKindInstructionGetGlobal-1183]
	_ = x[ComputationKindInstructionSetGlobal-1184]
	_ = x[ComputationKindInstructionGetField-1185]
	_ = x[ComputationKindInstructionRemoveField-1186]
	_ = x[ComputationKindInstructionSetField-1187]
	_ = x[ComputationKindInstructionSetIndex-1188]
	_ = x[ComputationKindInstructionGetIndex-1189]
	_ = x[ComputationKindInstructionRemoveIndex-1190]
	_ = x[ComputationKindInstructionInvoke-1198]
	_ = x[ComputationKindInstructionInvokeMethodStatic-1199]
	_ = x[ComputationKindInstructionInvokeMethodDynamic-1200]
	_ = x[ComputationKindInstructionDrop-1208]
	_ = x[ComputationKindInstructionDup-1209]
	_ = x[ComputationKindInstructionIterator-1216]
	_ = x[ComputationKindInstructionIteratorHasNext-1217]
	_ = x[ComputationKindInstructionIteratorNext-1218]
	_ = x[ComputationKindInstructionEmitEvent-1219]
}

const _ComputationKind_name = "UnknownStatementLoopFunctionInvocationCreateCompositeValueTransferCompositeValueDestroyCompositeValueCreateArrayValueTransferArrayValueDestroyArrayValueCreateDictionaryValueTransferDictionaryValueDestroyDictionaryValueEncodeValueSTDLIBPanicSTDLIBAssertSTDLIBRevertibleRandomSTDLIBRLPDecodeStringSTDLIBRLPDecodeListInstructionReturnInstructionReturnValueInstructionJumpInstructionJumpIfFalseInstructionJumpIfTrueInstructionJumpIfNilInstructionAddInstructionSubtractInstructionMultiplyInstructionDivideInstructionModInstructionNegateInstructionBitwiseOrInstructionBitwiseAndInstructionBitwiseXorInstructionBitwiseLeftShiftInstructionBitwiseRightShiftInstructionLessInstructionGreaterInstructionLessOrEqualInstructionGreaterOrEqualInstructionEqualInstructionNotEqualInstructionNotInstructionUnwrapInstructionDestroyInstructionTransferAndConvertInstructionSimpleCastInstructionFailableCastInstructionForceCastInstructionDerefInstructionTransferInstructionTrueInstructionFalseInstructionNilInstructionNewInstructionNewPathInstructionNewArrayInstructionNewDictionaryInstructionNewRefInstructionNewClosureInstructionGetConstantInstructionGetLocalInstructionSetLocalInstructionGetUpvalueInstructionSetUpvalueInstructionGetGlobalInstructionSetGlobalInstructionGetFieldInstructionRemoveFieldInstructionSetFieldInstructionSetIndexInstructionGetIndexInstructionRemoveIndexInstructionInvokeInstructionInvokeMethodStaticInstructionInvokeMethodDynamicInstructionDropInstructionDupInstructionIteratorInstructionIteratorHasNextInstructionIteratorNextInstructionEmitEvent"

var _ComputationKind_map = map[ComputationKind]string{
	0:    _ComputationKind_name[0:7],
	1001: _ComputationKind_name[7:16],
	1002: _ComputationKind_name[16:20],
	1003: _ComputationKind_name[20:38],
	1010: _ComputationKind_name[38:58],
	1011: _ComputationKind_name[58:80],
	1012: _ComputationKind_name[80:101],
	1025: _ComputationKind_name[101:117],
	1026: _ComputationKind_name[117:135],
	1027: _ComputationKind_name[135:152],
	1040: _ComputationKind_name[152:173],
	1041: _ComputationKind_name[173:196],
	1042: _ComputationKind_name[196:218],
	1080: _ComputationKind_name[218:229],
	1100: _ComputationKind_name[229:240],
	1101: _ComputationKind_name[240:252],
	1102: _ComputationKind_name[252:274],
	1108: _ComputationKind_name[274:295],
	1109: _ComputationKind_name[295:314],
	1110: _ComputationKind_name[314:331],
	1111: _ComputationKind_name[331:353],
	1112: _ComputationKind_name[353:368],
	1113: _ComputationKind_name[368:390],
	1114: _ComputationKind_name[390:411],
	1115: _ComputationKind_name[411:431],
	1120: _ComputationKind_name[431:445],
	1121: _ComputationKind_name[445:464],
	1122: _ComputationKind_name[464:483],
	1123: _ComputationKind_name[483:500],
	1124: _ComputationKind_name[500:514],
	1125: _ComputationKind_name[514:531],
	1129: _ComputationKind_name[531:551],
	1130: _ComputationKind_name[551:572],
	1131: _ComputationKind_name[572:593],
	1132: _ComputationKind_name[593:620],
	1133: _ComputationKind_name[620:648],
	1135: _ComputationKind_name[648:663],
	1136: _ComputationKind_name[663:681],
	1137: _ComputationKind_name[681:703],
	1138: _ComputationKind_name[703:728],
	1139: _ComputationKind_name[728:744],
	1140: _ComputationKind_name[744:763],
	1141: _ComputationKind_name[763:777],
	1145: _ComputationKind_name[777:794],
	1146: _ComputationKind_name[794:812],
	1147: _ComputationKind_name[812:841],
	1148: _ComputationKind_name[841:862],
	1149: _ComputationKind_name[862:885],
	1150: _ComputationKind_name[885:905],
	1151: _ComputationKind_name[905:921],
	1152: _ComputationKind_name[921:940],
	1158: _ComputationKind_name[940:955],
	1159: _ComputationKind_name[955:971],
	1160: _ComputationKind_name[971:985],
	1161: _ComputationKind_name[985:999],
	1162: _ComputationKind_name[999:1017],
	1163: _ComputationKind_name[1017:1036],
	1164: _ComputationKind_name[1036:1060],
	1165: _ComputationKind_name[1060:1077],
	1166: _ComputationKind_name[1077:1098],
	1178: _ComputationKind_name[1098:1120],
	1179: _ComputationKind_name[1120:1139],
	1180: _ComputationKind_name[1139:1158],
	1181: _ComputationKind_name[1158:1179],
	1182: _ComputationKind_name[1179:1200],
	1183: _ComputationKind_name[1200:1220],
	1184: _ComputationKind_name[1220:1240],
	1185: _ComputationKind_name[1240:1259],
	1186: _ComputationKind_name[1259:1281],
	1187: _ComputationKind_name[1281:1300],
	1188: _ComputationKind_name[1300:1319],
	1189: _ComputationKind_name[1319:1338],
	1190: _ComputationKind_name[1338:1360],
	1198: _ComputationKind_name[1360:1377],
	1199: _ComputationKind_name[1377:1406],
	1200: _ComputationKind_name[1406:1436],
	1208: _ComputationKind_name[1436:1451],
	1209: _ComputationKind_name[1451:1465],
	1216: _ComputationKind_name[1465:1484],
	1217: _ComputationKind_name[1484:1510],
	1218: _ComputationKind_name[1510:1533],
	1219: _ComputationKind_name[1533:1553],
}

func (i ComputationKind) String() string {
	if str, ok := _ComputationKind_map[i]; ok {
		return str
	}
	return "ComputationKind(" + strconv.FormatInt(int64(i), 10) + ")"
}
