// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindAddressValue-1]
	_ = x[MemoryKindStringValue-2]
	_ = x[MemoryKindCharacterValue-3]
	_ = x[MemoryKindNumberValue-4]
	_ = x[MemoryKindArrayValueBase-5]
	_ = x[MemoryKindDictionaryValueBase-6]
	_ = x[MemoryKindCompositeValueBase-7]
	_ = x[MemoryKindSimpleCompositeValueBase-8]
	_ = x[MemoryKindOptionalValue-9]
	_ = x[MemoryKindTypeValue-10]
	_ = x[MemoryKindPathValue-11]
	_ = x[MemoryKindCapabilityValue-12]
	_ = x[MemoryKindStorageReferenceValue-13]
	_ = x[MemoryKindEphemeralReferenceValue-14]
	_ = x[MemoryKindInterpretedFunctionValue-15]
	_ = x[MemoryKindHostFunctionValue-16]
	_ = x[MemoryKindBoundFunctionValue-17]
	_ = x[MemoryKindBigInt-18]
	_ = x[MemoryKindSimpleCompositeValue-19]
	_ = x[MemoryKindPublishedValue-20]
	_ = x[MemoryKindStorageCapabilityControllerValue-21]
	_ = x[MemoryKindAccountCapabilityControllerValue-22]
	_ = x[MemoryKindAtreeArrayDataSlab-23]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-24]
	_ = x[MemoryKindAtreeArrayElementOverhead-25]
	_ = x[MemoryKindAtreeMapDataSlab-26]
	_ = x[MemoryKindAtreeMapMetaDataSlab-27]
	_ = x[MemoryKindAtreeMapElementOverhead-28]
	_ = x[MemoryKindAtreeMapPreAllocatedElement-29]
	_ = x[MemoryKindAtreeEncodedSlab-30]
	_ = x[MemoryKindPrimitiveStaticType-31]
	_ = x[MemoryKindCompositeStaticType-32]
	_ = x[MemoryKindInterfaceStaticType-33]
	_ = x[MemoryKindVariableSizedStaticType-34]
	_ = x[MemoryKindConstantSizedStaticType-35]
	_ = x[MemoryKindDictionaryStaticType-36]
	_ = x[MemoryKindInclusiveRangeStaticType-37]
	_ = x[MemoryKindOptionalStaticType-38]
	_ = x[MemoryKindIntersectionStaticType-39]
	_ = x[MemoryKindEntitlementSetStaticAccess-40]
	_ = x[MemoryKindEntitlementMapStaticAccess-41]
	_ = x[MemoryKindReferenceStaticType-42]
	_ = x[MemoryKindCapabilityStaticType-43]
	_ = x[MemoryKindFunctionStaticType-44]
	_ = x[MemoryKindCadenceVoidValue-45]
	_ = x[MemoryKindCadenceOptionalValue-46]
	_ = x[MemoryKindCadenceBoolValue-47]
	_ = x[MemoryKindCadenceStringValue-48]
	_ = x[MemoryKindCadenceCharacterValue-49]
	_ = x[MemoryKindCadenceAddressValue-50]
	_ = x[MemoryKindCadenceIntValue-51]
	_ = x[MemoryKindCadenceNumberValue-52]
	_ = x[MemoryKindCadenceArrayValueBase-53]
	_ = x[MemoryKindCadenceArrayValueLength-54]
	_ = x[MemoryKindCadenceDictionaryValue-55]
	_ = x[MemoryKindCadenceInclusiveRangeValue-56]
	_ = x[MemoryKindCadenceKeyValuePair-57]
	_ = x[MemoryKindCadenceStructValueBase-58]
	_ = x[MemoryKindCadenceStructValueSize-59]
	_ = x[MemoryKindCadenceResourceValueBase-60]
	_ = x[MemoryKindCadenceAttachmentValueBase-61]
	_ = x[MemoryKindCadenceResourceValueSize-62]
	_ = x[MemoryKindCadenceAttachmentValueSize-63]
	_ = x[MemoryKindCadenceEventValueBase-64]
	_ = x[MemoryKindCadenceEventValueSize-65]
	_ = x[MemoryKindCadenceContractValueBase-66]
	_ = x[MemoryKindCadenceContractValueSize-67]
	_ = x[MemoryKindCadenceEnumValueBase-68]
	_ = x[MemoryKindCadenceEnumValueSize-69]
	_ = x[MemoryKindCadencePathValue-70]
	_ = x[MemoryKindCadenceTypeValue-71]
	_ = x[MemoryKindCadenceCapabilityValue-72]
	_ = x[MemoryKindCadenceDeprecatedPathCapabilityType-73]
	_ = x[MemoryKindCadenceFunctionValue-74]
	_ = x[MemoryKindCadenceOptionalType-75]
	_ = x[MemoryKindCadenceDeprecatedRestrictedType-76]
	_ = x[MemoryKindCadenceVariableSizedArrayType-77]
	_ = x[MemoryKindCadenceConstantSizedArrayType-78]
	_ = x[MemoryKindCadenceDictionaryType-79]
	_ = x[MemoryKindCadenceInclusiveRangeType-80]
	_ = x[MemoryKindCadenceField-81]
	_ = x[MemoryKindCadenceParameter-82]
	_ = x[MemoryKindCadenceTypeParameter-83]
	_ = x[MemoryKindCadenceStructType-84]
	_ = x[MemoryKindCadenceResourceType-85]
	_ = x[MemoryKindCadenceAttachmentType-86]
	_ = x[MemoryKindCadenceEventType-87]
	_ = x[MemoryKindCadenceContractType-88]
	_ = x[MemoryKindCadenceStructInterfaceType-89]
	_ = x[MemoryKindCadenceResourceInterfaceType-90]
	_ = x[MemoryKindCadenceContractInterfaceType-91]
	_ = x[MemoryKindCadenceFunctionType-92]
	_ = x[MemoryKindCadenceEntitlementSetAccess-93]
	_ = x[MemoryKindCadenceEntitlementMapAccess-94]
	_ = x[MemoryKindCadenceReferenceType-95]
	_ = x[MemoryKindCadenceIntersectionType-96]
	_ = x[MemoryKindCadenceCapabilityType-97]
	_ = x[MemoryKindCadenceEnumType-98]
	_ = x[MemoryKindRawString-99]
	_ = x[MemoryKindAddressLocation-100]
	_ = x[MemoryKindBytes-101]
	_ = x[MemoryKindVariable-102]
	_ = x[MemoryKindCompositeTypeInfo-103]
	_ = x[MemoryKindCompositeField-104]
	_ = x[MemoryKindInvocation-105]
	_ = x[MemoryKindStorageMap-106]
	_ = x[MemoryKindStorageKey-107]
	_ = x[MemoryKindTypeToken-108]
	_ = x[MemoryKindErrorToken-109]
	_ = x[MemoryKindSpaceToken-110]
	_ = x[MemoryKindProgram-111]
	_ = x[MemoryKindIdentifier-112]
	_ = x[MemoryKindArgument-113]
	_ = x[MemoryKindBlock-114]
	_ = x[MemoryKindFunctionBlock-115]
	_ = x[MemoryKindParameter-116]
	_ = x[MemoryKindParameterList-117]
	_ = x[MemoryKindTypeParameter-118]
	_ = x[MemoryKindTypeParameterList-119]
	_ = x[MemoryKindTransfer-120]
	_ = x[MemoryKindMembers-121]
	_ = x[MemoryKindTypeAnnotation-122]
	_ = x[MemoryKindDictionaryEntry-123]
	_ = x[MemoryKindSwitchCase-124]
	_ = x[MemoryKindFunctionDeclaration-125]
	_ = x[MemoryKindCompositeDeclaration-126]
	_ = x[MemoryKindAttachmentDeclaration-127]
	_ = x[MemoryKindInterfaceDeclaration-128]
	_ = x[MemoryKindEntitlementDeclaration-129]
	_ = x[MemoryKindEntitlementMappingElement-130]
	_ = x[MemoryKindEntitlementMappingDeclaration-131]
	_ = x[MemoryKindEnumCaseDeclaration-132]
	_ = x[MemoryKindFieldDeclaration-133]
	_ = x[MemoryKindTransactionDeclaration-134]
	_ = x[MemoryKindImportDeclaration-135]
	_ = x[MemoryKindVariableDeclaration-136]
	_ = x[MemoryKindSpecialFunctionDeclaration-137]
	_ = x[MemoryKindPragmaDeclaration-138]
	_ = x[MemoryKindAssignmentStatement-139]
	_ = x[MemoryKindBreakStatement-140]
	_ = x[MemoryKindContinueStatement-141]
	_ = x[MemoryKindEmitStatement-142]
	_ = x[MemoryKindExpressionStatement-143]
	_ = x[MemoryKindForStatement-144]
	_ = x[MemoryKindIfStatement-145]
	_ = x[MemoryKindReturnStatement-146]
	_ = x[MemoryKindSwapStatement-147]
	_ = x[MemoryKindSwitchStatement-148]
	_ = x[MemoryKindWhileStatement-149]
	_ = x[MemoryKindRemoveStatement-150]
	_ = x[MemoryKindBooleanExpression-151]
	_ = x[MemoryKindVoidExpression-152]
	_ = x[MemoryKindNilExpression-153]
	_ = x[MemoryKindStringExpression-154]
	_ = x[MemoryKindIntegerExpression-155]
	_ = x[MemoryKindFixedPointExpression-156]
	_ = x[MemoryKindArrayExpression-157]
	_ = x[MemoryKindStringTemplateExpression-158]
	_ = x[MemoryKindDictionaryExpression-159]
	_ = x[MemoryKindIdentifierExpression-160]
	_ = x[MemoryKindInvocationExpression-161]
	_ = x[MemoryKindMemberExpression-162]
	_ = x[MemoryKindIndexExpression-163]
	_ = x[MemoryKindConditionalExpression-164]
	_ = x[MemoryKindUnaryExpression-165]
	_ = x[MemoryKindBinaryExpression-166]
	_ = x[MemoryKindFunctionExpression-167]
	_ = x[MemoryKindCastingExpression-168]
	_ = x[MemoryKindCreateExpression-169]
	_ = x[MemoryKindDestroyExpression-170]
	_ = x[MemoryKindReferenceExpression-171]
	_ = x[MemoryKindForceExpression-172]
	_ = x[MemoryKindPathExpression-173]
	_ = x[MemoryKindAttachExpression-174]
	_ = x[MemoryKindConstantSizedType-175]
	_ = x[MemoryKindDictionaryType-176]
	_ = x[MemoryKindFunctionType-177]
	_ = x[MemoryKindInstantiationType-178]
	_ = x[MemoryKindNominalType-179]
	_ = x[MemoryKindOptionalType-180]
	_ = x[MemoryKindReferenceType-181]
	_ = x[MemoryKindIntersectionType-182]
	_ = x[MemoryKindVariableSizedType-183]
	_ = x[MemoryKindPosition-184]
	_ = x[MemoryKindRange-185]
	_ = x[MemoryKindElaboration-186]
	_ = x[MemoryKindActivation-187]
	_ = x[MemoryKindActivationEntries-188]
	_ = x[MemoryKindVariableSizedSemaType-189]
	_ = x[MemoryKindConstantSizedSemaType-190]
	_ = x[MemoryKindDictionarySemaType-191]
	_ = x[MemoryKindOptionalSemaType-192]
	_ = x[MemoryKindIntersectionSemaType-193]
	_ = x[MemoryKindReferenceSemaType-194]
	_ = x[MemoryKindEntitlementSemaType-195]
	_ = x[MemoryKindEntitlementMapSemaType-196]
	_ = x[MemoryKindEntitlementRelationSemaType-197]
	_ = x[MemoryKindCapabilitySemaType-198]
	_ = x[MemoryKindInclusiveRangeSemaType-199]
	_ = x[MemoryKindOrderedMap-200]
	_ = x[MemoryKindOrderedMapEntryList-201]
	_ = x[MemoryKindOrderedMapEntry-202]
	_ = x[MemoryKindGoSliceLength-203]
	_ = x[MemoryKindCompiler-204]
	_ = x[MemoryKindCompilerGlobal-205]
	_ = x[MemoryKindCompilerConstant-206]
	_ = x[MemoryKindLast-207]
}

const _MemoryKind_name = "UnknownAddressValueStringValueCharacterValueNumberValueArrayValueBaseDictionaryValueBaseCompositeValueBaseSimpleCompositeValueBaseOptionalValueTypeValuePathValueCapabilityValueStorageReferenceValueEphemeralReferenceValueInterpretedFunctionValueHostFunctionValueBoundFunctionValueBigIntSimpleCompositeValuePublishedValueStorageCapabilityControllerValueAccountCapabilityControllerValueAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeArrayElementOverheadAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadAtreeMapPreAllocatedElementAtreeEncodedSlabPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeInclusiveRangeStaticTypeOptionalStaticTypeIntersectionStaticTypeEntitlementSetStaticAccessEntitlementMapStaticAccessReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidValueCadenceOptionalValueCadenceBoolValueCadenceStringValueCadenceCharacterValueCadenceAddressValueCadenceIntValueCadenceNumberValueCadenceArrayValueBaseCadenceArrayValueLengthCadenceDictionaryValueCadenceInclusiveRangeValueCadenceKeyValuePairCadenceStructValueBaseCadenceStructValueSizeCadenceResourceValueBaseCadenceAttachmentValueBaseCadenceResourceValueSizeCadenceAttachmentValueSizeCadenceEventValueBaseCadenceEventValueSizeCadenceContractValueBaseCadenceContractValueSizeCadenceEnumValueBaseCadenceEnumValueSizeCadencePathValueCadenceTypeValueCadenceCapabilityValueCadenceDeprecatedPathCapabilityTypeCadenceFunctionValueCadenceOptionalTypeCadenceDeprecatedRestrictedTypeCadenceVariableSizedArrayTypeCadenceConstantSizedArrayTypeCadenceDictionaryTypeCadenceInclusiveRangeTypeCadenceFieldCadenceParameterCadenceTypeParameterCadenceStructTypeCadenceResourceTypeCadenceAttachmentTypeCadenceEventTypeCadenceContractTypeCadenceStructInterfaceTypeCadenceResourceInterfaceTypeCadenceContractInterfaceTypeCadenceFunctionTypeCadenceEntitlementSetAccessCadenceEntitlementMapAccessCadenceReferenceTypeCadenceIntersectionTypeCadenceCapabilityTypeCadenceEnumTypeRawStringAddressLocationBytesVariableCompositeTypeInfoCompositeFieldInvocationStorageMapStorageKeyTypeTokenErrorTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTypeParameterTypeParameterListTransferMembersTypeAnnotationDictionaryEntrySwitchCaseFunctionDeclarationCompositeDeclarationAttachmentDeclarationInterfaceDeclarationEntitlementDeclarationEntitlementMappingElementEntitlementMappingDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementRemoveStatementBooleanExpressionVoidExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionStringTemplateExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionAttachExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeIntersectionTypeVariableSizedTypePositionRangeElaborationActivationActivationEntriesVariableSizedSemaTypeConstantSizedSemaTypeDictionarySemaTypeOptionalSemaTypeIntersectionSemaTypeReferenceSemaTypeEntitlementSemaTypeEntitlementMapSemaTypeEntitlementRelationSemaTypeCapabilitySemaTypeInclusiveRangeSemaTypeOrderedMapOrderedMapEntryListOrderedMapEntryGoSliceLengthCompilerCompilerGlobalCompilerConstantLast"

var _MemoryKind_index = [...]uint16{0, 7, 19, 30, 44, 55, 69, 88, 106, 130, 143, 152, 161, 176, 197, 220, 244, 261, 279, 285, 305, 319, 351, 383, 401, 423, 448, 464, 484, 507, 534, 550, 569, 588, 607, 630, 653, 673, 697, 715, 737, 763, 789, 808, 828, 846, 862, 882, 898, 916, 937, 956, 971, 989, 1010, 1033, 1055, 1081, 1100, 1122, 1144, 1168, 1194, 1218, 1244, 1265, 1286, 1310, 1334, 1354, 1374, 1390, 1406, 1428, 1463, 1483, 1502, 1533, 1562, 1591, 1612, 1637, 1649, 1665, 1685, 1702, 1721, 1742, 1758, 1777, 1803, 1831, 1859, 1878, 1905, 1932, 1952, 1975, 1996, 2011, 2020, 2035, 2040, 2048, 2065, 2079, 2089, 2099, 2109, 2118, 2128, 2138, 2145, 2155, 2163, 2168, 2181, 2190, 2203, 2216, 2233, 2241, 2248, 2262, 2277, 2287, 2306, 2326, 2347, 2367, 2389, 2414, 2443, 2462, 2478, 2500, 2517, 2536, 2562, 2579, 2598, 2612, 2629, 2642, 2661, 2673, 2684, 2699, 2712, 2727, 2741, 2756, 2773, 2787, 2800, 2816, 2833, 2853, 2868, 2892, 2912, 2932, 2952, 2968, 2983, 3004, 3019, 3035, 3053, 3070, 3086, 3103, 3122, 3137, 3151, 3167, 3184, 3198, 3210, 3227, 3238, 3250, 3263, 3279, 3296, 3304, 3309, 3320, 3330, 3347, 3368, 3389, 3407, 3423, 3443, 3460, 3479, 3501, 3528, 3546, 3568, 3578, 3597, 3612, 3625, 3633, 3647, 3663, 3667}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
