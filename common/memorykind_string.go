// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindAddressValue-1]
	_ = x[MemoryKindStringValue-2]
	_ = x[MemoryKindCharacterValue-3]
	_ = x[MemoryKindNumberValue-4]
	_ = x[MemoryKindArrayValueBase-5]
	_ = x[MemoryKindDictionaryValueBase-6]
	_ = x[MemoryKindCompositeValueBase-7]
	_ = x[MemoryKindSimpleCompositeValueBase-8]
	_ = x[MemoryKindOptionalValue-9]
	_ = x[MemoryKindTypeValue-10]
	_ = x[MemoryKindPathValue-11]
	_ = x[MemoryKindCapabilityValue-12]
	_ = x[MemoryKindStorageReferenceValue-13]
	_ = x[MemoryKindEphemeralReferenceValue-14]
	_ = x[MemoryKindInterpretedFunctionValue-15]
	_ = x[MemoryKindHostFunctionValue-16]
	_ = x[MemoryKindBoundFunctionValue-17]
	_ = x[MemoryKindBigInt-18]
	_ = x[MemoryKindSimpleCompositeValue-19]
	_ = x[MemoryKindPublishedValue-20]
	_ = x[MemoryKindStorageCapabilityControllerValue-21]
	_ = x[MemoryKindAccountCapabilityControllerValue-22]
	_ = x[MemoryKindAtreeArrayDataSlab-23]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-24]
	_ = x[MemoryKindAtreeArrayElementOverhead-25]
	_ = x[MemoryKindAtreeMapDataSlab-26]
	_ = x[MemoryKindAtreeMapMetaDataSlab-27]
	_ = x[MemoryKindAtreeMapElementOverhead-28]
	_ = x[MemoryKindAtreeMapPreAllocatedElement-29]
	_ = x[MemoryKindAtreeEncodedSlab-30]
	_ = x[MemoryKindPrimitiveStaticType-31]
	_ = x[MemoryKindCompositeStaticType-32]
	_ = x[MemoryKindInterfaceStaticType-33]
	_ = x[MemoryKindVariableSizedStaticType-34]
	_ = x[MemoryKindConstantSizedStaticType-35]
	_ = x[MemoryKindDictionaryStaticType-36]
	_ = x[MemoryKindInclusiveRangeStaticType-37]
	_ = x[MemoryKindOptionalStaticType-38]
	_ = x[MemoryKindIntersectionStaticType-39]
	_ = x[MemoryKindEntitlementSetStaticAccess-40]
	_ = x[MemoryKindEntitlementMapStaticAccess-41]
	_ = x[MemoryKindReferenceStaticType-42]
	_ = x[MemoryKindCapabilityStaticType-43]
	_ = x[MemoryKindFunctionStaticType-44]
	_ = x[MemoryKindTransactionStaticType-45]
	_ = x[MemoryKindCadenceVoidValue-46]
	_ = x[MemoryKindCadenceOptionalValue-47]
	_ = x[MemoryKindCadenceBoolValue-48]
	_ = x[MemoryKindCadenceStringValue-49]
	_ = x[MemoryKindCadenceCharacterValue-50]
	_ = x[MemoryKindCadenceAddressValue-51]
	_ = x[MemoryKindCadenceIntValue-52]
	_ = x[MemoryKindCadenceNumberValue-53]
	_ = x[MemoryKindCadenceArrayValueBase-54]
	_ = x[MemoryKindCadenceArrayValueLength-55]
	_ = x[MemoryKindCadenceDictionaryValue-56]
	_ = x[MemoryKindCadenceInclusiveRangeValue-57]
	_ = x[MemoryKindCadenceKeyValuePair-58]
	_ = x[MemoryKindCadenceStructValueBase-59]
	_ = x[MemoryKindCadenceStructValueSize-60]
	_ = x[MemoryKindCadenceResourceValueBase-61]
	_ = x[MemoryKindCadenceAttachmentValueBase-62]
	_ = x[MemoryKindCadenceResourceValueSize-63]
	_ = x[MemoryKindCadenceAttachmentValueSize-64]
	_ = x[MemoryKindCadenceEventValueBase-65]
	_ = x[MemoryKindCadenceEventValueSize-66]
	_ = x[MemoryKindCadenceContractValueBase-67]
	_ = x[MemoryKindCadenceContractValueSize-68]
	_ = x[MemoryKindCadenceEnumValueBase-69]
	_ = x[MemoryKindCadenceEnumValueSize-70]
	_ = x[MemoryKindCadencePathValue-71]
	_ = x[MemoryKindCadenceTypeValue-72]
	_ = x[MemoryKindCadenceCapabilityValue-73]
	_ = x[MemoryKindCadenceDeprecatedPathCapabilityType-74]
	_ = x[MemoryKindCadenceFunctionValue-75]
	_ = x[MemoryKindCadenceOptionalType-76]
	_ = x[MemoryKindCadenceDeprecatedRestrictedType-77]
	_ = x[MemoryKindCadenceVariableSizedArrayType-78]
	_ = x[MemoryKindCadenceConstantSizedArrayType-79]
	_ = x[MemoryKindCadenceDictionaryType-80]
	_ = x[MemoryKindCadenceInclusiveRangeType-81]
	_ = x[MemoryKindCadenceField-82]
	_ = x[MemoryKindCadenceParameter-83]
	_ = x[MemoryKindCadenceTypeParameter-84]
	_ = x[MemoryKindCadenceStructType-85]
	_ = x[MemoryKindCadenceResourceType-86]
	_ = x[MemoryKindCadenceAttachmentType-87]
	_ = x[MemoryKindCadenceEventType-88]
	_ = x[MemoryKindCadenceContractType-89]
	_ = x[MemoryKindCadenceStructInterfaceType-90]
	_ = x[MemoryKindCadenceResourceInterfaceType-91]
	_ = x[MemoryKindCadenceContractInterfaceType-92]
	_ = x[MemoryKindCadenceFunctionType-93]
	_ = x[MemoryKindCadenceEntitlementSetAccess-94]
	_ = x[MemoryKindCadenceEntitlementMapAccess-95]
	_ = x[MemoryKindCadenceReferenceType-96]
	_ = x[MemoryKindCadenceIntersectionType-97]
	_ = x[MemoryKindCadenceCapabilityType-98]
	_ = x[MemoryKindCadenceEnumType-99]
	_ = x[MemoryKindRawString-100]
	_ = x[MemoryKindAddressLocation-101]
	_ = x[MemoryKindBytes-102]
	_ = x[MemoryKindVariable-103]
	_ = x[MemoryKindCompositeTypeInfo-104]
	_ = x[MemoryKindCompositeField-105]
	_ = x[MemoryKindInvocation-106]
	_ = x[MemoryKindStorageMap-107]
	_ = x[MemoryKindStorageKey-108]
	_ = x[MemoryKindTypeToken-109]
	_ = x[MemoryKindErrorToken-110]
	_ = x[MemoryKindSpaceToken-111]
	_ = x[MemoryKindProgram-112]
	_ = x[MemoryKindIdentifier-113]
	_ = x[MemoryKindArgument-114]
	_ = x[MemoryKindBlock-115]
	_ = x[MemoryKindFunctionBlock-116]
	_ = x[MemoryKindParameter-117]
	_ = x[MemoryKindParameterList-118]
	_ = x[MemoryKindTypeParameter-119]
	_ = x[MemoryKindTypeParameterList-120]
	_ = x[MemoryKindTransfer-121]
	_ = x[MemoryKindMembers-122]
	_ = x[MemoryKindTypeAnnotation-123]
	_ = x[MemoryKindDictionaryEntry-124]
	_ = x[MemoryKindSwitchCase-125]
	_ = x[MemoryKindFunctionDeclaration-126]
	_ = x[MemoryKindCompositeDeclaration-127]
	_ = x[MemoryKindAttachmentDeclaration-128]
	_ = x[MemoryKindInterfaceDeclaration-129]
	_ = x[MemoryKindEntitlementDeclaration-130]
	_ = x[MemoryKindEntitlementMappingElement-131]
	_ = x[MemoryKindEntitlementMappingDeclaration-132]
	_ = x[MemoryKindEnumCaseDeclaration-133]
	_ = x[MemoryKindFieldDeclaration-134]
	_ = x[MemoryKindTransactionDeclaration-135]
	_ = x[MemoryKindImportDeclaration-136]
	_ = x[MemoryKindVariableDeclaration-137]
	_ = x[MemoryKindSpecialFunctionDeclaration-138]
	_ = x[MemoryKindPragmaDeclaration-139]
	_ = x[MemoryKindAssignmentStatement-140]
	_ = x[MemoryKindBreakStatement-141]
	_ = x[MemoryKindContinueStatement-142]
	_ = x[MemoryKindEmitStatement-143]
	_ = x[MemoryKindExpressionStatement-144]
	_ = x[MemoryKindForStatement-145]
	_ = x[MemoryKindIfStatement-146]
	_ = x[MemoryKindReturnStatement-147]
	_ = x[MemoryKindSwapStatement-148]
	_ = x[MemoryKindSwitchStatement-149]
	_ = x[MemoryKindWhileStatement-150]
	_ = x[MemoryKindRemoveStatement-151]
	_ = x[MemoryKindBooleanExpression-152]
	_ = x[MemoryKindVoidExpression-153]
	_ = x[MemoryKindNilExpression-154]
	_ = x[MemoryKindStringExpression-155]
	_ = x[MemoryKindIntegerExpression-156]
	_ = x[MemoryKindFixedPointExpression-157]
	_ = x[MemoryKindArrayExpression-158]
	_ = x[MemoryKindStringTemplateExpression-159]
	_ = x[MemoryKindDictionaryExpression-160]
	_ = x[MemoryKindIdentifierExpression-161]
	_ = x[MemoryKindInvocationExpression-162]
	_ = x[MemoryKindMemberExpression-163]
	_ = x[MemoryKindIndexExpression-164]
	_ = x[MemoryKindConditionalExpression-165]
	_ = x[MemoryKindUnaryExpression-166]
	_ = x[MemoryKindBinaryExpression-167]
	_ = x[MemoryKindFunctionExpression-168]
	_ = x[MemoryKindCastingExpression-169]
	_ = x[MemoryKindCreateExpression-170]
	_ = x[MemoryKindDestroyExpression-171]
	_ = x[MemoryKindReferenceExpression-172]
	_ = x[MemoryKindForceExpression-173]
	_ = x[MemoryKindPathExpression-174]
	_ = x[MemoryKindAttachExpression-175]
	_ = x[MemoryKindConstantSizedType-176]
	_ = x[MemoryKindDictionaryType-177]
	_ = x[MemoryKindFunctionType-178]
	_ = x[MemoryKindInstantiationType-179]
	_ = x[MemoryKindNominalType-180]
	_ = x[MemoryKindOptionalType-181]
	_ = x[MemoryKindReferenceType-182]
	_ = x[MemoryKindIntersectionType-183]
	_ = x[MemoryKindVariableSizedType-184]
	_ = x[MemoryKindPosition-185]
	_ = x[MemoryKindRange-186]
	_ = x[MemoryKindElaboration-187]
	_ = x[MemoryKindActivation-188]
	_ = x[MemoryKindActivationEntries-189]
	_ = x[MemoryKindVariableSizedSemaType-190]
	_ = x[MemoryKindConstantSizedSemaType-191]
	_ = x[MemoryKindDictionarySemaType-192]
	_ = x[MemoryKindOptionalSemaType-193]
	_ = x[MemoryKindIntersectionSemaType-194]
	_ = x[MemoryKindReferenceSemaType-195]
	_ = x[MemoryKindEntitlementSemaType-196]
	_ = x[MemoryKindEntitlementMapSemaType-197]
	_ = x[MemoryKindEntitlementRelationSemaType-198]
	_ = x[MemoryKindCapabilitySemaType-199]
	_ = x[MemoryKindInclusiveRangeSemaType-200]
	_ = x[MemoryKindOrderedMap-201]
	_ = x[MemoryKindOrderedMapEntryList-202]
	_ = x[MemoryKindOrderedMapEntry-203]
	_ = x[MemoryKindGoSliceLength-204]
	_ = x[MemoryKindCompiler-205]
	_ = x[MemoryKindCompilerGlobal-206]
	_ = x[MemoryKindCompilerConstant-207]
	_ = x[MemoryKindLast-208]
}

const _MemoryKind_name = "UnknownAddressValueStringValueCharacterValueNumberValueArrayValueBaseDictionaryValueBaseCompositeValueBaseSimpleCompositeValueBaseOptionalValueTypeValuePathValueCapabilityValueStorageReferenceValueEphemeralReferenceValueInterpretedFunctionValueHostFunctionValueBoundFunctionValueBigIntSimpleCompositeValuePublishedValueStorageCapabilityControllerValueAccountCapabilityControllerValueAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeArrayElementOverheadAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadAtreeMapPreAllocatedElementAtreeEncodedSlabPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeInclusiveRangeStaticTypeOptionalStaticTypeIntersectionStaticTypeEntitlementSetStaticAccessEntitlementMapStaticAccessReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeTransactionStaticTypeCadenceVoidValueCadenceOptionalValueCadenceBoolValueCadenceStringValueCadenceCharacterValueCadenceAddressValueCadenceIntValueCadenceNumberValueCadenceArrayValueBaseCadenceArrayValueLengthCadenceDictionaryValueCadenceInclusiveRangeValueCadenceKeyValuePairCadenceStructValueBaseCadenceStructValueSizeCadenceResourceValueBaseCadenceAttachmentValueBaseCadenceResourceValueSizeCadenceAttachmentValueSizeCadenceEventValueBaseCadenceEventValueSizeCadenceContractValueBaseCadenceContractValueSizeCadenceEnumValueBaseCadenceEnumValueSizeCadencePathValueCadenceTypeValueCadenceCapabilityValueCadenceDeprecatedPathCapabilityTypeCadenceFunctionValueCadenceOptionalTypeCadenceDeprecatedRestrictedTypeCadenceVariableSizedArrayTypeCadenceConstantSizedArrayTypeCadenceDictionaryTypeCadenceInclusiveRangeTypeCadenceFieldCadenceParameterCadenceTypeParameterCadenceStructTypeCadenceResourceTypeCadenceAttachmentTypeCadenceEventTypeCadenceContractTypeCadenceStructInterfaceTypeCadenceResourceInterfaceTypeCadenceContractInterfaceTypeCadenceFunctionTypeCadenceEntitlementSetAccessCadenceEntitlementMapAccessCadenceReferenceTypeCadenceIntersectionTypeCadenceCapabilityTypeCadenceEnumTypeRawStringAddressLocationBytesVariableCompositeTypeInfoCompositeFieldInvocationStorageMapStorageKeyTypeTokenErrorTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTypeParameterTypeParameterListTransferMembersTypeAnnotationDictionaryEntrySwitchCaseFunctionDeclarationCompositeDeclarationAttachmentDeclarationInterfaceDeclarationEntitlementDeclarationEntitlementMappingElementEntitlementMappingDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementRemoveStatementBooleanExpressionVoidExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionStringTemplateExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionAttachExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeIntersectionTypeVariableSizedTypePositionRangeElaborationActivationActivationEntriesVariableSizedSemaTypeConstantSizedSemaTypeDictionarySemaTypeOptionalSemaTypeIntersectionSemaTypeReferenceSemaTypeEntitlementSemaTypeEntitlementMapSemaTypeEntitlementRelationSemaTypeCapabilitySemaTypeInclusiveRangeSemaTypeOrderedMapOrderedMapEntryListOrderedMapEntryGoSliceLengthCompilerCompilerGlobalCompilerConstantLast"

var _MemoryKind_index = [...]uint16{0, 7, 19, 30, 44, 55, 69, 88, 106, 130, 143, 152, 161, 176, 197, 220, 244, 261, 279, 285, 305, 319, 351, 383, 401, 423, 448, 464, 484, 507, 534, 550, 569, 588, 607, 630, 653, 673, 697, 715, 737, 763, 789, 808, 828, 846, 867, 883, 903, 919, 937, 958, 977, 992, 1010, 1031, 1054, 1076, 1102, 1121, 1143, 1165, 1189, 1215, 1239, 1265, 1286, 1307, 1331, 1355, 1375, 1395, 1411, 1427, 1449, 1484, 1504, 1523, 1554, 1583, 1612, 1633, 1658, 1670, 1686, 1706, 1723, 1742, 1763, 1779, 1798, 1824, 1852, 1880, 1899, 1926, 1953, 1973, 1996, 2017, 2032, 2041, 2056, 2061, 2069, 2086, 2100, 2110, 2120, 2130, 2139, 2149, 2159, 2166, 2176, 2184, 2189, 2202, 2211, 2224, 2237, 2254, 2262, 2269, 2283, 2298, 2308, 2327, 2347, 2368, 2388, 2410, 2435, 2464, 2483, 2499, 2521, 2538, 2557, 2583, 2600, 2619, 2633, 2650, 2663, 2682, 2694, 2705, 2720, 2733, 2748, 2762, 2777, 2794, 2808, 2821, 2837, 2854, 2874, 2889, 2913, 2933, 2953, 2973, 2989, 3004, 3025, 3040, 3056, 3074, 3091, 3107, 3124, 3143, 3158, 3172, 3188, 3205, 3219, 3231, 3248, 3259, 3271, 3284, 3300, 3317, 3325, 3330, 3341, 3351, 3368, 3389, 3410, 3428, 3444, 3464, 3481, 3500, 3522, 3549, 3567, 3589, 3599, 3618, 3633, 3646, 3654, 3668, 3684, 3688}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
